{"ast":null,"code":"import React, { useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReactReduxContext } from './Context';\nimport Subscription from '../utils/Subscription';\n\nfunction Provider(_ref) {\n  var store = _ref.store,\n      context = _ref.context,\n      children = _ref.children;\n  var contextValue = useMemo(function () {\n    var subscription = new Subscription(store);\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    return {\n      store: store,\n      subscription: subscription\n    };\n  }, [store]);\n  var previousState = useMemo(function () {\n    return store.getState();\n  }, [store]);\n  useEffect(function () {\n    var subscription = contextValue.subscription;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return function () {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = null;\n    };\n  }, [contextValue, previousState]);\n  var Context = context || ReactReduxContext;\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nProvider.propTypes = {\n  store: PropTypes.shape({\n    subscribe: PropTypes.func.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    getState: PropTypes.func.isRequired\n  }),\n  context: PropTypes.object,\n  children: PropTypes.any\n};\nexport default Provider;","map":{"version":3,"sources":["/Users/luojiongtian/works/webprojects/react-redux-demo-log-main/node_modules/react-redux/es/components/Provider.js"],"names":["React","useMemo","useEffect","PropTypes","ReactReduxContext","Subscription","Provider","_ref","store","context","children","contextValue","subscription","onStateChange","notifyNestedSubs","previousState","getState","trySubscribe","tryUnsubscribe","Context","createElement","value","propTypes","shape","subscribe","func","isRequired","dispatch","object","any"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,iBAAR,QAAgC,WAAhC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAGA,MAAIC,YAAY,GAAGV,OAAO,CAAC,YAAY;AACnC,QAAIW,YAAY,GAAG,IAAIP,YAAJ,CAAiBG,KAAjB,CAAnB;AACAI,IAAAA,YAAY,CAACC,aAAb,GAA6BD,YAAY,CAACE,gBAA1C;AACA,WAAO;AACHN,MAAAA,KAAK,EAAEA,KADJ;AAEHI,MAAAA,YAAY,EAAEA;AAFX,KAAP;AAIH,GAPyB,EAOvB,CAACJ,KAAD,CAPuB,CAA1B;AAQA,MAAIO,aAAa,GAAGd,OAAO,CAAC,YAAY;AACpC,WAAOO,KAAK,CAACQ,QAAN,EAAP;AACH,GAF0B,EAExB,CAACR,KAAD,CAFwB,CAA3B;AAGAN,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIU,YAAY,GAAGD,YAAY,CAACC,YAAhC;AACAA,IAAAA,YAAY,CAACK,YAAb;;AAEA,QAAIF,aAAa,KAAKP,KAAK,CAACQ,QAAN,EAAtB,EAAwC;AACpCJ,MAAAA,YAAY,CAACE,gBAAb;AACH;;AAED,WAAO,YAAY;AACfF,MAAAA,YAAY,CAACM,cAAb;AACAN,MAAAA,YAAY,CAACC,aAAb,GAA6B,IAA7B;AACH,KAHD;AAIH,GAZQ,EAYN,CAACF,YAAD,EAAeI,aAAf,CAZM,CAAT;AAaA,MAAII,OAAO,GAAGV,OAAO,IAAIL,iBAAzB;AACA,SAAOJ,KAAK,CAACoB,aAAN,CAAoBD,OAAO,CAACb,QAA5B,EAAsC;AACzCe,IAAAA,KAAK,EAAEV;AADkC,GAAtC,EAEJD,QAFI,CAAP;AAGH;;AAEDJ,QAAQ,CAACgB,SAAT,GAAqB;AACjBd,EAAAA,KAAK,EAAEL,SAAS,CAACoB,KAAV,CAAgB;AACnBC,IAAAA,SAAS,EAAErB,SAAS,CAACsB,IAAV,CAAeC,UADP;AAEnBC,IAAAA,QAAQ,EAAExB,SAAS,CAACsB,IAAV,CAAeC,UAFN;AAGnBV,IAAAA,QAAQ,EAAEb,SAAS,CAACsB,IAAV,CAAeC;AAHN,GAAhB,CADU;AAMjBjB,EAAAA,OAAO,EAAEN,SAAS,CAACyB,MANF;AAOjBlB,EAAAA,QAAQ,EAAEP,SAAS,CAAC0B;AAPH,CAArB;AASA,eAAevB,QAAf","sourcesContent":["import React, {useMemo, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {ReactReduxContext} from './Context';\nimport Subscription from '../utils/Subscription';\n\nfunction Provider(_ref) {\n    var store = _ref.store,\n        context = _ref.context,\n        children = _ref.children;\n    var contextValue = useMemo(function () {\n        var subscription = new Subscription(store);\n        subscription.onStateChange = subscription.notifyNestedSubs;\n        return {\n            store: store,\n            subscription: subscription\n        };\n    }, [store]);\n    var previousState = useMemo(function () {\n        return store.getState();\n    }, [store]);\n    useEffect(function () {\n        var subscription = contextValue.subscription;\n        subscription.trySubscribe();\n\n        if (previousState !== store.getState()) {\n            subscription.notifyNestedSubs();\n        }\n\n        return function () {\n            subscription.tryUnsubscribe();\n            subscription.onStateChange = null;\n        };\n    }, [contextValue, previousState]);\n    var Context = context || ReactReduxContext;\n    return React.createElement(Context.Provider, {\n        value: contextValue\n    }, children);\n}\n\nProvider.propTypes = {\n    store: PropTypes.shape({\n        subscribe: PropTypes.func.isRequired,\n        dispatch: PropTypes.func.isRequired,\n        getState: PropTypes.func.isRequired\n    }),\n    context: PropTypes.object,\n    children: PropTypes.any\n};\nexport default Provider;"]},"metadata":{},"sourceType":"module"}